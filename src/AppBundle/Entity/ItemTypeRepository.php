<?php

/*
 * @package ArionCRM
 * @author Isaac Raway <iraway@metasushi [dot] com>
 * @author Antoinette Smith <asmith@metasushi [dot] com>
 * @link http://arioncrm.com/
 * @copyright (c)2015-2022. MetaSushi, LLC. All rights reserved. Your use of this software in any way indicates agreement
 * to the software license available currenty at http://arioncrm.com/ 
 * This open source edition is released under GPL 3.0. available at https://www.gnu.org/licenses/gpl-3.0.en.html
 */


namespace AppBundle\Entity;

use Psr\Log\LoggerInterface;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\Bundle\DoctrineBundle\Registry as Doctrine;

/**
 * ItemTypesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemTypeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @var \Psr\Log\LoggerInterface $logger
     */
    protected $logger;

    /**
     * @var Doctrine $doctrine
     */
    protected $doctrine;

    protected $cache = [];
    
    /**
     * Called by service bindings in services.yml instead of __construct, which is needed by
     * Doctrine.
     */
    public function initService(LoggerInterface $logger, Doctrine $doctrine)
    {
        $this->logger = $logger;
        $this->doctrine = $doctrine;
    }

    /**
     * List item types for the account and user
     */
    public function findItemTypes($accountId, $userId)
    {
        //return $this->findBy(['accountId' => $accountId]);
        return  $this->createQueryBuilder('itemTypes')
                     ->where('itemTypes.accountId = :accountId')
                     ->setParameter('accountId', $accountId)
                     ->orderBy('itemTypes.sortOrder')
                     ->getQuery()->getResult();

    }

    /**
     * List item types for the parent
     */
    public function findItemTypesByParent($accountId, $parentItemTypeId)
    {
        return  $this->createQueryBuilder('itemTypes')
                     ->join('\AppBundle\Entity\Field', 'f', 'f.itemTypeId = itemTypes.id')
                     ->where('itemTypes.accountId = :accountId AND f.fieldItemType = :parentItemTypeId')
                     ->setParameter('accountId', $accountId)
                     ->setParameter('parentItemTypeId', $parentItemTypeId)
                     ->orderBy('itemTypes.sortOrder')
                     ->getQuery()->getResult();

    }

    /**
     * Checks that an item type exists.
     *
     * @param integer $accountId account to search
     * @param string $itemTypeName The item type's name
     * @return ItemType's id if type exists, false if not
     */
    public function isItemType($accountId, $itemTypeName) 
    {
        //$this->logger->debug(__METHOD__.'::params:'.json_encode([$accountId, $itemTypeName]));

        if(array_key_exists('isItemType::'.$itemTypeName, $this->cache)) {
            $result = $this->cache['isItemType::'.$itemTypeName];
        } else {
            $result = $this->getItemType($accountId, $itemTypeName);
            
            $this->cache['isItemType::'.$itemTypeName] = (empty($result)) ? false : $result->getId();
            $result = $this->cache['isItemType::'.$itemTypeName];
        }

        return $result;
    }
    
    /**
     * Gets an itemType for a given account ID and item type name
     *
     * @param integer $account_id user's account ID
     * @param string $itemTypeName The item type's name
     * @return \app\models\ItemType
     */
    public function getItemType($accountId, $itemTypeName) 
    {
        if(!$accountId || !$itemTypeName) throw new \InvalidArgumentException('getItemType requires accountId and itemTypeName');
        if(!is_numeric($accountId)) throw new \InvalidArgumentException('getItemType requires numeric accountId');
        if(is_numeric($itemTypeName)) throw new \InvalidArgumentException('getItemType requires non-numeric itemTypeName (maybe this is an itemTypeID?)');

        if(count($this->cache) == 0) {
            $this->logger->warning('ItemTypeRepository cache is empty while requesting '.$itemTypeName);
        }
        if(array_key_exists('getItemType::'.$itemTypeName, $this->cache)) {
            $result = $this->cache['getItemType::'.$itemTypeName];
        } else {
            $this->logger->warning('ItemTypeRepository get from database: '.$itemTypeName);
            $this->logger->warning(json_encode($this->cache, true));
            $result = $this->findOneBy(['accountId' => $accountId,
                                        'pluralName' => $itemTypeName]);
            $this->cache['getItemType::'.$itemTypeName] = $result;
        }

        return $result;
    }

    /**
     * Gets an itemType for a given account ID and item type ID
     *
     * @param integer $account_id user's account ID
     * @param integer $itemTypeId The item type's ID
     * @return \app\models\ItemType
     */
    public function getItemTypeById($accountId, $itemTypeId) 
    {
        if(!$accountId || !$itemTypeId) throw new \InvalidArgumentException('getItemTypeById requires accountId and itemTypeId');
        if(!is_numeric($accountId)) throw new \InvalidArgumentException('getItemTypeById requires numeric accountId');
        if(!is_numeric($itemTypeId)) throw new \InvalidArgumentException('getItemTypeById requires numeric itemTypeId (maybe this is an itemTypeName?)');

        if(array_key_exists('getItemTypeById::'.$itemTypeId, $this->cache)) {
            $result = $this->cache['getItemTypeById::'.$itemTypeId];
        } else {
            $result = $this->findOneBy(['accountId' => $accountId,
                                        'id' => $itemTypeId]);
            $this->cache['getItemTypeById::'.$itemTypeId] = $result;
        }

        return $result;
    }

    /**
     * Create a new item type
     *
     * @param integer $accountId account the item type should belond to
     * @param string name for the new item type
     * @param string label for the new item type
     * @param string pluralName for the new item type
     * @param string pluralLabel for the new item type
     * @param bool areUsers for the new item type
     * @param bool ownUsers for the new item type
     * @return \app\models\ItemType
     */
    public function createItemType($accountId, $name, $label, $pluralName, $pluralLabel, $areUsers, $ownUsers)
    {
        $itemType = new ItemType();
        $itemType->setAccountId($accountId);
        $itemType->setName($name);
        $itemType->setLabel($label);
        $itemType->setPluralName($pluralName);
        $itemType->setPluralLabel($pluralLabel);
        $itemType->setAreUsers($areUsers);
        $itemType->setOwnUsers($ownUsers);
        if($itemType->save()) {
            //$id = $this->connectionManager->connection()->getPDO()->lastInsertId();
            $id = $itemType->getId();
            //$this->logger->debug(__METHOD__.'::insert id::'.$id);
            $itemType = $this->getItemType($accountId, $pluralName);
            //$this->logger->debug(__METHOD__.'::created itemType::'.print_r($itemType, true));
            return $itemType;
        } else {
            //$this->logger->debug(__METHOD__.'::could not create itemType!');
            return false;
        }
    }
}

<?php

/*
 * @package ArionCRM
 * @author Isaac Raway <iraway@metasushi [dot] com>
 * @author Antoinette Smith <asmith@metasushi [dot] com>
 * @link http://arioncrm.com/
 * @copyright (c)2015-2022. MetaSushi, LLC. All rights reserved. Your use of this software in any way indicates agreement
 * to the software license available currenty at http://arioncrm.com/ 
 * This open source edition is released under GPL 3.0. available at https://www.gnu.org/licenses/gpl-3.0.en.html
 */

namespace AppBundle\Entity;

use Psr\Log\LoggerInterface;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\Bundle\DoctrineBundle\Registry as Doctrine;

/**
 * ItemValueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemValueRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @var \Psr\Log\LoggerInterface $logger
     */
    protected $logger;

    /**
     * @var Doctrine $doctrine
     */
    protected $doctrine;

    const FIND_VALUES = 1;
    const FIND_ITEMS = 2;

    private $cache = [];

    /**
     * Called by service bindings in services.yml instead of __construct, which is needed by
     * Doctrine.
     */
    public function initService(LoggerInterface $logger, Doctrine $doctrine)
    {
        $this->logger = $logger;
        $this->doctrine = $doctrine;
    }

    public function clearCache()
    {
        $this->cache = [];
    }
    
    /**
     * Find item values form a particular item.
     *
     * @param integer $account_id account to find item values under
     * @param integer $itemId item to find values for
     * @param integer $ver version to get (optional) -- 0 for latest
     * @param string $search search for keyword in item values (optional)
     * @return array of Item_value_model
     */
    public function findItemValues($accountId, $itemId, $ver=0, $search='',
                                   $restrictedUserOwnerItemType=0, $restrictedUserOwnerItemId=0)
    {
        if(!$accountId || !$itemId) throw new \InvalidArgumentException('findItemValues requires accountId and itemId');

        $cacheKey = 'getItem:'.md5($accountId.':'.$itemId.':'.$ver.':'.md5($search).':'.
                                   $restrictedUserOwnerItemType.':'.$restrictedUserOwnerItemId.':');
        if(isset($this->cache[$cacheKey])) return $this->cache[$cacheKey];

        // Cast all injectable params to int immediately before using
        $sqlAndParams = $this->itemValuesSearchSql($accountId, $itemId, $ver, $search, [], 
                                                   ItemValueRepository::FIND_VALUES,
                                                   /* itemTypeId */ 0,  /* fieldType */ '', /* fieldInTitle */ false, [],
                                                   $restrictedUserOwnerItemType, $restrictedUserOwnerItemId, false, false);

        $rsm = $this->standardResultSetMapping();
        $query = $this->getEntityManager()->createNativeQuery($sqlAndParams[0], $rsm);
        $query->setParameters($sqlAndParams[1]);

        $this->cache[$cacheKey] = $query->getResult();
        return $this->cache[$cacheKey];
    }

    public function findFiles($accountId, $restrictedUserOwnerItemType=0, $restrictedUserOwnerItemId=0)
    {
        $cacheKey = 'findFiles:'.md5($accountId.':'.$restrictedUserOwnerItemType.':'.$restrictedUserOwnerItemId.':');
        if(isset($this->cache[$cacheKey])) return $this->cache[$cacheKey];

        $sqlAndParams = $this->itemValuesSearchSql($accountId, 0, 0, '', [], ItemValueRepository::FIND_VALUES,
                                          /* itemTypeId */ 0, /* fieldType */ 'File', /* fieldInTitle */ false, [],
                                          $restrictedUserOwnerItemType, $restrictedUserOwnerItemId, false, false);
        $rsm = $this->standardResultSetMapping();
        $query = $this->getEntityManager()->createNativeQuery($sqlAndParams[0], $rsm);
        $query->setParameters($sqlAndParams[1]);
        $result = $query->getResult();
        $this->cache[$cacheKey] = $result;
        return $result;
    }

    public function fetchExtraItemTitles($accountId, $itemTypeId, array $filters=[], $search, $restrictedUserOwnerItemType, $restrictedUserOwnerItemId)
    {
        if(!is_numeric($itemTypeId)) throw new \InvalidArgumentException('fetchExtraItemTitles requires numeric itemTypeId!');

        $cacheKey = 'fetchExtraItemTitles:'.md5($accountId.':'.$itemTypeId.':'.json_encode($filters).md5($search).':'.
                                                $restrictedUserOwnerItemType.':'.$restrictedUserOwnerItemId.':');
        if(isset($this->cache[$cacheKey])) return $this->cache[$cacheKey];


        $sqlAndParams = $this->itemValuesSearchSql($accountId, 0, 0, $search, $filters, 
                                                               ItemValueRepository::FIND_VALUES,
                                                               $itemTypeId, /* fieldType */ '', /* fieldInTitle */ true, [],
                                                               $restrictedUserOwnerItemType, $restrictedUserOwnerItemId, false, false);
        $rsm = $this->standardResultSetMapping();
        $query = $this->getEntityManager()->createNativeQuery($sqlAndParams[0], $rsm);
        $query->setParameters($sqlAndParams[1]);
        $result = $query->getResult();
        $this->cache[$cacheKey] = $result;
        return $result;
    }

    /**
     * Build ResultSetMapping instance used for most queries in this repository
     *
     * @return ResultSetMapping
     */
    private function standardResultSetMapping()
    {
        $rsm = new ResultSetMapping();
        //                    Class,                         Table
        $rsm->addEntityResult('\AppBundle\Entity\ItemValue', 'item_values');
        //                   Table,         Column,           Property
        $rsm->addFieldResult('item_values', 'id',             'id');
        $rsm->addFieldResult('item_values', 'account_id',     'accountId');
        $rsm->addFieldResult('item_values', 'item_id',        'itemId');
        $rsm->addFieldResult('item_values', 'ver',            'ver');
        $rsm->addFieldResult('item_values', 'prev_ver',       'prevVer');
        $rsm->addFieldResult('item_values', 'sub_field_count','subFieldCount');
        $rsm->addFieldResult('item_values', 'sub_value_count','subValueCount');
        $rsm->addFieldResult('item_values', 'field_id',       'fieldId');
        $rsm->addFieldResult('item_values', 'sub_field_id',   'subFieldId');
        $rsm->addFieldResult('item_values', 'sub_value_id',   'subValueId');
        $rsm->addFieldResult('item_values', 'value',          'value');
        $rsm->addFieldResult('item_values', 'user_id',        'userId');
        $rsm->addFieldResult('item_values', 'created_at',     'createdAt');

        return $rsm;
    }

    /**
     * Construct a search SQL to find itemValues matching given conditions. This is used by this class as well as
     * by \app\tables\Items to find items records. Returns an SQL string with tokens (?) for parameters, as well as
     * an array of params to bind to the query.
     *
     * If restrictedUserOwnerItemType and restrictedUserOwnerItemId are specified, limit result to items that
     * contain a relationship field pointed at the same owner item type, with the same item ID. For instance, 
     * limit items to those that have a Clients relationship field with "Acme Co." client selected as the client.
     *
     * @param integer $account_id account to find item values under
     * @param integer $itemId item to find values for
     * @param integer $ver version to get (optional) -- 0 for latest
     * @param string $search search for keyword in item values (optional)
     * @param array $filters array of field=>values that must match to be returned
     * @param $return ItemValues::FIND_VALUES to return item_values records, ItemValues::FIND_ITEMS to return values JOINed to items records
     * @param int $itemTypeId restrict returned item record JOINS to this itemType ID, only applies to ItemValues::FIND_ITEMS mode
     * @param $fieldType
     * @param $fieldInTitle
     * @param array $sort field name*direction to sort on. Examples: id*desc, dueDate*asc
     * @param int $restrictedUserOwnerItemType (optional)
     * @param int $restrictedUserOwnerItemId (optional) 
     * @param int $limit number of rows to return
     * @param int $page page of results to fetch, 1 is the first
     *            page 
     * @return array of [$sql, $params]
     */
    public function itemValuesSearchSql($accountId, $itemId=0, $ver=0, $search='', $filters=[],
                                        $return=ItemValueRepository::FIND_VALUES,
                                        $itemTypeId=0, $fieldType='',  $fieldInTitle=false,
                                        array $sort,
                                        $restrictedUserOwnerItemType=0, $restrictedUserOwnerItemId=0,
                                        $limit=50, $page=1)
    {
        $cacheKey = 'itemValuesSearchSql:'.md5($accountId.':'.$itemId.':'.$ver.':'.md5($search).':'.
                                     json_encode($filters).':'.$return.':'.$itemTypeId.':'.
                                     $fieldType.':'.$fieldInTitle.':'.$restrictedUserOwnerItemType.':'.
                                     $restrictedUserOwnerItemId.':'.implode('*', $sort).':').':'.$limit.':'.$page;
        if(isset($this->cache[$cacheKey])) return $this->cache[$cacheKey];

        if(!$sort || count($sort) != 2 || !$sort[0])
        {
            $sort = false;
        }

        $params = [];

        $ver_sql = '';
        if($ver) {
            //$query = $query->where('ver', $ver);
            $ver_sql = ' AND ver <= '.(int)$ver.' ';
        }


        if($return == self::FIND_ITEMS)
        {
            $sql = 'SELECT items.id, items.id AS item_id, items.*'
                    .($sort ? ', sv.value AS sort_value' : '')
                    .' FROM item_values v JOIN items ON items.id = v.item_id ';
            //, v.id AS value_id, v.ver AS value_ver, v.value
        } else {
            $sql = 'SELECT v.*'
                    .($sort ? ', sv.value AS sort_value' : '')
                    .'FROM item_values v JOIN items ON items.id = v.item_id ';
        }

        if($sort) {
            $sql .= 'JOIN item_values sv ON sv.item_id = items.id ';
        }

        $isRestrictedUser = $restrictedUserOwnerItemType != 0 || $restrictedUserOwnerItemId != 0;
    
        if($isRestrictedUser)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* RESTRICTED USER */ '.PHP_EOL;
            // Limit to items that are visible to restricted users
            $sql .= <<<SQL

      JOIN items i ON i.id = v.item_id
      JOIN item_types t ON t.id = i.item_type_id
      WHERE t.visible_to_restricted_users = 1 

SQL;

            // Limit to items that contain a relationship field pointed at the same owner item type,
            // with the same item ID. For instance, limit items to those that have a Clients relationship
            // field with "Acme Co." client selected as the client.
            $sql .= <<<SQL

        AND v.item_id IN ( /* Where Item Belongs to Same Owner */
            SELECT a.item_id
            FROM item_values a
            JOIN fields ON fields.id = a.field_id       
                JOIN items ON items.id = a.item_id        
                JOIN item_types ON item_types.id = items.item_type_id       
                WHERE a.value = ?
                AND fields.field_type = "Relationship"         
                AND fields.field_item_type_id = ?
                AND a.ver IN (SELECT MAX(ver)
                        FROM item_values
                        WHERE field_id = a.field_id
                        GROUP BY item_id)
        )
SQL;
            $params[] = $restrictedUserOwnerItemId;     // Example: 3  -- CLIENT ID
            $params[] = $restrictedUserOwnerItemType;   // Example: 10 -- CLIENTS
        }

        if($sort)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* SORT */ '.PHP_EOL;
            $sql .= ($isRestrictedUser ? 'AND ' : 'WHERE ');
            $sql .= 'sv.field_id = '.(int)$sort[0].' '
                   .'AND sv.ver IN (SELECT MAX(ver)
                        FROM item_values
                        WHERE field_id = '.(int)$sort[0].' '.
                       'GROUP BY item_id) ';
        }

        if($accountId)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* ACCOUNT_ID */ '.PHP_EOL;
            $sql .= ($sort||$isRestrictedUser ? 'AND ' : 'WHERE '). 'v.account_id = ? ';
            $params[] = $accountId;
        } else {
            throw new \Exception('AccountId required to search item data');
        }

        if($itemId)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* ITEM ID */ '.PHP_EOL;
            $sql .= 'AND v.item_id = ? ';
            $params[] = $itemId;
        }

        if($itemTypeId)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* ITEM TYPE */ '.PHP_EOL;
            //if($accountId || $itemId) $sql .= 'AND ';
            //else $sql .= 'WHERE ';
            $sql .= 'AND items.item_type_id = ? ';
            $params[] = $itemTypeId;
        }

        if($search)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* SEARCH */ '.PHP_EOL;
            $sql .= 'AND v.value LIKE ? ';
            $search = '%'.$search.'%';
            $params[] = $search;
        }

        if($fieldType)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* FIELD TYPE */ '.PHP_EOL;
            $sql .= 'AND v.value != "" AND v.field_id IN (SELECT id FROM fields WHERE field_type = ?) ';
            $params[] = $fieldType;
        }

        if($fieldInTitle)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* FIELD IN TITLE */ '.PHP_EOL;
            $sql .= 'AND v.value != "" AND v.field_id IN (SELECT id FROM fields WHERE in_title = ?) ';
            $params[] = $fieldInTitle;
        }



        if(count($filters) > 0)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* FILTERS */ '.PHP_EOL;

            // If the first index is zero, then this is a list of item IDs, not a list of
            // fieldID => value
            $filterItemIds = false;
            foreach(array_keys($filters) as $key) {
                if($key === 0) {
                    $filterItemIds = true;
                }
                break;
            }

            if($filterItemIds) {
                $sql .= 'AND items.id IN (?) ';
                $params[] = $filters;
            } else {

                foreach($filters as $fieldId => $value)
                {
                    if(is_numeric($fieldId)) {
                        $sql .= PHP_EOL.PHP_EOL.' /* FILTER '.(int)$fieldId.' */ '.PHP_EOL;
                        $this->logger->debug(__METHOD__.'::filter::'.$fieldId.' full filters: '.json_encode($filters));
                       // throw new \Exception('Internal error 160117 -- field cannot be found');
                    
                        if(substr($value, 0, 4) === "not*") {
                            $value = substr($value, 4, strlen($value)-4);
                            
                            $sql .= 'AND v.item_id IN (SELECT item_id FROM item_values WHERE account_id = ? AND '.
                                    'field_id = ? AND value != ? AND ver IN (SELECT MAX(ver)
                                    FROM item_values
                                    WHERE field_id = ?
                                    GROUP BY item_id, field_id)) ';
                        } else {
                            $sql .= 'AND v.item_id IN (SELECT item_id FROM item_values WHERE account_id = ? AND '.
                                    'field_id = ? AND value = ? AND ver IN (SELECT MAX(ver)
                                    FROM item_values
                                    WHERE field_id = ?
                                    GROUP BY item_id, field_id)) ';
                        }
                        $params[] = $accountId;
                        $params[] = $fieldId;
                        $params[] = $value;
                        $params[] = $fieldId;
                    } else {
                        $this->logger->debug(__METHOD__.'::ERROR 160117 -- field cannot be found in filter::'.$fieldId.' full filters: '.json_encode($filters));
                       // throw new \Exception('Internal error 160117 -- field cannot be found');
                    }
                }
            }
        }

        //if($accountId || $itemId || $search || $itemTypeId) $sql .= 'AND ';
        //else $sql .= 'WHERE ';

        // NOTE -- ORDER BY is very important, or item_values logic in Entity\Item::save will be very
        // messed up since our old values will not be in the right order.
        
$sql .= <<<SQL

/* LATEST VERSION */

/* Highest version number of every value row */
    AND v.ver = (SELECT MAX(ver) FROM item_values WHERE v.item_id = item_id AND v.field_id = field_id AND v.sub_field_id = sub_field_id AND v.sub_value_id = sub_value_id$ver_sql)
/* Only sub field IDs less than highest version's sub_field_count to filter out deleted sub_fields from old versions */
    AND v.sub_field_id < (SELECT sub_field_count FROM item_values WHERE v.item_id = item_id AND v.field_id = field_id AND ver = (SELECT MAX(ver) FROM item_values WHERE v.item_id = item_id AND v.field_id = field_id$ver_sql) LIMIT 1)
/* Only sub value IDs less than highest version's sub_value_count to filter out deleted sub_values from old versions */
    AND v.sub_value_id < (SELECT sub_value_count FROM item_values WHERE v.item_id = item_id AND v.field_id = field_id AND v.sub_field_id = sub_field_id AND ver = (SELECT MAX(ver) FROM item_values WHERE v.item_id = item_id AND v.field_id = field_id AND v.sub_field_id = sub_field_id$ver_sql) LIMIT 1)
    GROUP BY v.item_id, v.field_id, v.sub_field_id, v.sub_value_id, v.sub_field_count, v.sub_value_count
SQL;

        $sql .= PHP_EOL.PHP_EOL.' /* SORTING */ '.PHP_EOL;
        $sql .= ' ORDER BY ';
        if($sort)
        {
            $sql .= PHP_EOL.PHP_EOL.' /* USER SPEC SORT */ '.PHP_EOL;
            $sql .= ' sort_value '.$sort[1].', ';
        } else {
            $sql .= PHP_EOL.PHP_EOL.' /* DEFAULT SORT */ '.PHP_EOL;
            $sql .= ' v.item_id DESC, ';
        }

        $sql .= ' v.sub_field_id ASC, v.sub_value_id ASC';

        if($limit && $page)
        {
            $sql .= ' LIMIT '.$limit.' OFFSET '.($page-1)*$limit;
        }
        
        $this->logger->debug(__METHOD__.'sql hash '.md5($sql).json_encode($params));
        $this->logger->debug(__METHOD__.'sql        -- '.$sql);
        $this->logger->debug(__METHOD__.'sql params -- '.json_encode($params));
    
        $this->cache[$cacheKey] = [$sql, $params];
        return $this->cache[$cacheKey];
    }

    /**
     * Turn a raw database object into a ORM model from \app\models namespace
     *
     * @param $result raw row
     * @param returns \app\models\ItemValue
     */
    protected function hydrateModel($result)
    {
        $model = $this->itemValuesModel->getClass();

        return new $model($result, true, false, true, true);
    }

    /**
     * Create an item value.
     *
     * @param integer $accountId account to create value under
     * @param integer $userId user that is creating the value
     * @param integer $itemId item to create value for
     * @param integer $fieldId field to create value for
     * @param integer $subFieldCount total number of sub_fields
     * @param integer $subFieldId id of THIS value's sub_field
     * @param integer $subValueCount total number of sub_values
     * @param integer $subValueId id of THIS value's sub_value
     * @param integer $value to save to field
     * @param integer $ver to save
     * @param integer $prevVer version this edit is based on
     * @param Item_value_model
     */
    public function createItemValue($accountId, $userId, $itemId, $fieldId, $subFieldCount, $subFieldId,
                                    $subValueCount, $subValueId, $value, $ver, $prevVer) 
    {
        $itemValue = new ItemValue();
        $itemValue->setAccountId($accountId);
        $itemValue->setUserId($userId);
        $itemValue->setCreatedAt(time());
        $itemValue->setItemId($itemId);
        $itemValue->setFieldId($fieldId);
        $itemValue->setSubFieldCount($subFieldCount);
        $itemValue->setSubFieldId($subFieldId);
        $itemValue->setSubValueCount($subValueCount);
        $itemValue->setSubValueId($subValueId);
        $itemValue->setValue($value);
        $itemValue->setVer($ver);
        $itemValue->setPrevVer($prevVer);
        $this->getEntityManager()->persist($itemValue);
        $this->getEntityManager()->flush();
        return $itemValue;
    }

    /**
     * Find the ID of an item from an item type with own_users == true, which
     * is the same as the value of a relationship field on the userItemId specified
     */
    public function getOwnerId($accountId, $userItemId)
    {
        $cacheKey = 'getOwnerId:'.md5($accountId.':'.$userItemId.':');
        if(isset($this->cache[$cacheKey])) return $this->cache[$cacheKey];

        $sql = <<<SQL
SELECT value AS item_id, fields.field_item_type_id AS item_type_id FROM item_values 
  JOIN fields ON fields.id = item_values.field_id
  JOIN item_types ON fields.field_item_type_id = item_types.id
      WHERE item_values.account_id = :accountId
        AND item_values.item_id = :userItemId /* users.user_item_id */
        AND fields.field_type = "Relationship"
        AND item_types.own_users = 1
        ORDER BY ver DESC
SQL;

        $conn = $this->getEntityManager()->getConnection();
        $query = $conn->prepare($sql);
        $query->bindValue('accountId', $accountId);
        $query->bindValue('userItemId', $userItemId);
        if($query->execute())
        {
            while($row = $query->fetch())
            {
                $row = (object)$row;
                if((int)$row->item_id != (int)$userItemId) {
                    $owner = [(int)$row->item_type_id, (int)$row->item_id];
                    $this->cache[$cacheKey] = $owner;
                    return $this->cache[$cacheKey];
                }
            }
        }
        $this->cache[$cacheKey] = [0,0];
        return $this->cache[$cacheKey];
    }
}
